
package net.ccbluex.liquidbounce.features.module.modules.other

import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.event.UpdateEvent
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.ModuleCategory
import net.ccbluex.liquidbounce.features.module.ModuleInfo
import net.ccbluex.liquidbounce.features.value.BoolValue
import net.ccbluex.liquidbounce.features.value.IntegerValue

@ModuleInfo(name = "AntiExploit", category = ModuleCategory.OTHER, array = false)
object AntiExploit : Module() {

    var arrowMax = 0

    val limitExplosionStrength = BoolValue("LimitExplosionStrength", true)
    val limitExplosionRange = BoolValue("LimitExplosionRange", true)
    val limitParticlesAmount = BoolValue("LimitParticlesAmount", true)
    val limitParticlesSpeed = BoolValue("LimitParticlesSpeed", true)
    val limitedArrowsSpawned = BoolValue("LimitedArrowsSpawned", true)
    val maxArrowsSpawned = IntegerValue("MaxArrowsSpawned", 100, 10,1000).displayable { limitedArrowsSpawned.get() }
    val cancelDemo = BoolValue("CancelDemo", true)

    @EventTarget
    fun onUpdate(event: UpdateEvent) {
        if (mc.thePlayer.ticksExisted % 500 == 0 && arrowMax > 0)
            arrowMax = 0
    }

}